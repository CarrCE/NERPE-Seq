% FFASTQREAD Reads one or more sequences from a fastq file very quickly
% using the fasta file map generated by FASTQMAP. 
%  
%  [hdr,seq]=ffastqread(fastqfile,map,...) returns the headers and
%  sequences.
%
%  [hdr,seq,qual]=ffastqread(...) also returns quality scores.
%   
%
% For options type 'help FASTQREAD'.
% Supported options include BLOCKREAD and IGNOREGAPS.
%
% Note: FASTQ quality data can include the @ character used in solexa
% (illumina) quality scores; this means all sequence data must be stored
% on one line per read.
%

%
% (C) Christopher E. Carr (chrisc@mit.edu) 2011/07/07
%
% USE AT YOUR OWN RISK. THIS ITEM IS PROVIDED "AS IS" WITHOUT WARRANTY OF
% ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
% THE IMPLIED WARRANTIES FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO
% THE QUALITY AND PERFORMANCE OF THE ITEM IS WITH YOU. SHOULD THE PROGRAM
% PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL ERRORS.
%
% IN NO EVENT WILL ANY COPYRIGHT HOLDER OR ANY OTHER PARTY WHO MAY MODIFY
% AND/OR REDISTRIBUTE THE PROGRAM, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
% ANY GENERAL, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF
% THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO
% LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
% OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
% PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGES.
%

function [hdr,seq,qual]=ffastqread(fastqfile,map,varargin)

    % initialize
    op = args2options(varargin);
    % set default values
    op = fieldcheck(op,'blockread',[],op);
    op = fieldcheck(op,'specific',[],op);
    op = fieldcheck(op,'ignoregaps',false,op);
    
    if ischar(map)
        % filename: load file
        load(map);
    end

    if ~isempty(op.blockread)
        % blockread requested
        seqid = op.blockread(1):op.blockread(2);
    elseif ~isempty(op.specific)
        % specific mode
        seqid = op.specific;
    else
        % read all (default)
        seqid = 1:numel(map);
    end
    byteid = map(seqid);
    
    N_seqs = numel(seqid);
    hdr = repmat({''},[N_seqs 1]);
    seq = repmat({''},[N_seqs 1]);
    qual = repmat({''},[N_seqs 1]);
    
    % open the file
    fid = fopen(fastqfile,'r');
    % get the requested sequences
    for k=1:numel(seqid)
        % seek to header location
        fseek(fid,byteid(k),'bof');
        tmp = fgetl(fid);
        hdr(k,1) = {tmp(2:numel(tmp))};
        seq_k = fgetl(fid);
        fgetl(fid);
        qual_k = fgetl(fid);
        
        if op.ignoregaps
            bKeep = seq_k~='-';
            seq(k,1) = {seq_k(bKeep)};
            qual(k,1) = {qual_k(bKeep)};
        else
            seq(k,1) = {seq_k};
            qual(k,1) = {qual_k};
        end
    end
    % close the file
    fclose(fid);
    
    % Handle structure vs. multiple outputs
    if nargout==1
        hdr = struct('Header',hdr,'Sequence',seq,'Quality',qual);
    end
end

% 
% FUNCTION OPTIONS = ARGS2OPTIONS(VARARGIN)
%
function options = args2options(varargin)
    tmp = varargin{1};
    if isempty(tmp)
        % no user specified options
        options = [];
    elseif length(tmp)==1
        % assume options struct passed by user
        options = cell2mat(tmp);
    else
        % parse any field-value fields
        odd = logical(mod(1:length(tmp),2));
        f = tmp(odd);
        c = tmp(not(odd));
        options = cell2struct(c,f,2);
    end
end

%
% FUNCTION S = FIELDCHECK(S,FIELD,DEFAULT)
%
function s = fieldcheck(s,field,default,useroptions)
    % allow user value, if present
    % to override default option
    if isfield(useroptions,field)
        default = useroptions.(field);
    end
    % fill in default option
    if isempty(s)
        s= struct(field,default);
    elseif ~isfield(s,field)
        s.(field) = default;
    end
end
